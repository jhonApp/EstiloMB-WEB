@using EstiloMB.Core;
@using EstiloMB.Site;
@using EstiloMB.MVC;
@inject Localization loc
@addTagHelper *, MyWebApp
@model EstiloMB_Web.Models.IndexViewModel
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] EstiloMB</title>
    <link rel="stylesheet" href="~/css/site.css" />
    <link rel="stylesheet" href="~/css/swiper.css" />
    
	<script type="text/javascript" src="~/js/fa/all.js"></script>
    <script type="text/javascript" src="~/js/ChartJS/Chart.js"></script>
    <script type="text/javascript" src="~/js/site.js"></script>
    <script type="text/javascript" src="~/js/principal.js"></script>
    <script type="text/javascript" src="~/js/jquery.js"></script>
    <script type="text/javascript" src="~/js/Minimum-1.8.js"></script>
    <script src="~/js/swipe.js"></script>
</head>
<body>
    <div class="nav-main">
        <nav>
            <div class="wrapper">
                <ul class="nav-links">
                    <li>
                        <a>Novidades</a>
                    </li>
                    <li>
                        <a>Feminino</a>
                        @*<div class="mega-box">
                            <div class="content">
                                <div class="row">
                                    <h1>Services</h1>
                                    <ul class="mega-links">
                                        <li><a>Drop Menu</a></li>
                                        <li><a>Drop Menu</a></li>
                                        <li><a>Drop Menu</a></li>
                                        <li><a>Drop Menu</a></li>
                                    </ul>
                                </div>
                                <div class="row">
                                    <h1>Services</h1>
                                    <ul class="mega-links">
                                        <li><a>Drop Menu</a></li>
                                        <li><a>Drop Menu</a></li>
                                        <li><a>Drop Menu</a></li>
                                        <li><a>Drop Menu</a></li>
                                    </ul>
                                </div>
                                <div class="row">
                                    <h1>Services</h1>
                                    <ul class="mega-links">
                                        <li><a>Drop Menu</a></li>
                                        <li><a>Drop Menu</a></li>
                                        <li><a>Drop Menu</a></li>
                                        <li><a>Drop Menu</a></li>
                                    </ul>
                                </div>
                            </div>
                        </div>*@
                    </li>
                    <li>
                         <img class="logo" src="~/image/logo-oficial.png" alt=""/>
                    </li>
                    <li>
                        <a>Promoções</a>
                    </li>
                    <li>
                        <a>Sobre</a>
                    </li>
                </ul>
            </div>
        </nav>
        <div class="itens">
            <div class="user">
                <ul>
                    <li><span> @User.Identity.Name </span></li>
                    <li>
                        <button class="usuario icon"
                                aria-expanded="false"
                                onclick="$user.expanding(this)">
                            <i class="far fa-user"></i>
                        </button>
                        <div class="login-content hidden">
                            <span>Que bom ver você por aqui!</span>
                            <a  href="~/Sistema/Login">Entrar</a>
                            <a href="~/Sistema/CriarConta" class="button-conta">Quero criar a minha conta</a>
                        </div>
                    </li>
                    <li><i class="far fa-heart icon"></i></li>
                    <li>
                        <button class="cart-icon icon"
                                aria-expanded="false"
                                onclick="$sacola.open()">
                            <span class="cart-count"></span>
                            <i class="far fa-shopping-cart icon"></i>
                        </button>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <header>
        
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>
    <footer class="border-top footer text-muted">
        &copy; 2022 - EstiloMB_Web - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
    </footer>
    <template id="ui-popup">
        <div class="ui-popup pulse-center">

            <div class="left-bar">
                <i class="fas fa-exclamation-triangle"></i>
            </div>

            <div class="title" ui-content="title">Confirmação</div>
            <div class="text" ui-content="text"></div>

            <div class="bottom-bar">
                <button class="confirm" ui-action="confirm">
                    <span><i class="far fa-check"></i></span>
                    Confirmar
                </button>

                <button class="cancel" ui-action="cancel">
                    <span><i class="far fa-times"></i></span>
                    Cancelar
                </button>
            </div>
        </div>
    </template>
</body>
</html>
<script>

    (function($user){
        var init = function (container) {
            let contents = container.querySelector("[ui-content='data']");
            if (!contents) { return false; }

            contents.isAutoLoad = (contents.getAttribute("ui-load") || "").toLowerCase() === "auto";

            if (!contents.initialized) {
                contents.container = container;
                contents.pixelAutoLoadThreshold = 25;
                contents.maxPageCount = parseInt(contents.getAttribute("maxPageCount"), 10) || 10;

                contents.url = contents.getAttribute("data-url");
                contents.template = contents.template || contents.querySelector(":scope > template") || false;

                let elements = null;

                elements = container.querySelectorAll("[ui-content='filter']") || false;
                for (let i = 0; i < elements.length; i++) {
                    let target = elements[i].hasAttribute("for") ? eval(elements[i].getAttribute("for").replace("this", "elements[i]")) : false;
                    if (target) { target.filter = elements[i]; continue; }

                    contents.filter = elements[i];
                }

                //elements = container.querySelectorAll("[ui-content='empty']") || false;
                //for (let i = 0; i < elements.length; i++) {
                //    let target = elements[i].hasAttribute("for") ? eval(elements[i].getAttribute("for").replace("this", "elements[i]")) : false;
                //    if (target) { target.empty = elements[i]; continue; }

                //    contents.empty = elements[i];
                //}

                //elements = container.querySelectorAll("[ui-content='loading']") || false;
                //for (let i = 0; i < elements.length; i++) {
                //    let target = elements[i].hasAttribute("for") ? eval(elements[i].getAttribute("for").replace("this", "elements[i]")) : false;
                //    if (target) { target.loading = elements[i]; continue; }

                //    contents.loading = elements[i];
                //}

                elements = container.querySelectorAll("[ui-content='paging']") || false;
                for (let i = 0; i < elements.length; i++) {
                    let target = elements[i].hasAttribute("for") ? eval(elements[i].getAttribute("for").replace("this", "elements[i]")) : false;
                    if (target) {
                        target.paging = elements[i];
                    }
                    else {
                        target = contents;
                        target.paging = elements[i];
                    }

                    target.paging.pages = target.paging.querySelector("[ui-content='pages']") || false;
                    target.paging.prevPage = target.paging.querySelector("[ui-content='prev-page']") || false;
                    target.paging.nextPage = target.paging.querySelector("[ui-content='next-page']") || false;
                }

                contents.initialized = true;
            }

            return contents;
        };

        $user.expanding = function(element) {
            if(element.ariaExpanded == 'false'){
                element.closest('li').querySelector('.login-content').classList.remove('hidden');
                element.ariaExpanded = 'true';

            }else {
                element.closest('li').querySelector('.login-content').classList.add('hidden');
                element.ariaExpanded = 'false';
            }
        };
    })(window.$user = window.$user || {});

    (function($sacola){
        var init = function (container) {
            let contents = container.querySelector("[ui-content='data']");
            if (!contents) { return false; }

            contents.isAutoLoad = (contents.getAttribute("ui-load") || "").toLowerCase() === "auto";

            if (!contents.initialized) {
                contents.container = container;
                contents.pixelAutoLoadThreshold = 25;
                contents.maxPageCount = parseInt(contents.getAttribute("maxPageCount"), 10) || 10;

                contents.url = contents.getAttribute("data-url");
                contents.template = contents.template || contents.querySelector(":scope > template") || false;

                let elements = null;

                elements = container.querySelectorAll("[ui-content='filter']") || false;
                for (let i = 0; i < elements.length; i++) {
                    let target = elements[i].hasAttribute("for") ? eval(elements[i].getAttribute("for").replace("this", "elements[i]")) : false;
                    if (target) { target.filter = elements[i]; continue; }

                    contents.filter = elements[i];
                }

                //elements = container.querySelectorAll("[ui-content='empty']") || false;
                //for (let i = 0; i < elements.length; i++) {
                //    let target = elements[i].hasAttribute("for") ? eval(elements[i].getAttribute("for").replace("this", "elements[i]")) : false;
                //    if (target) { target.empty = elements[i]; continue; }

                //    contents.empty = elements[i];
                //}

                //elements = container.querySelectorAll("[ui-content='loading']") || false;
                //for (let i = 0; i < elements.length; i++) {
                //    let target = elements[i].hasAttribute("for") ? eval(elements[i].getAttribute("for").replace("this", "elements[i]")) : false;
                //    if (target) { target.loading = elements[i]; continue; }

                //    contents.loading = elements[i];
                //}

                elements = container.querySelectorAll("[ui-content='paging']") || false;
                for (let i = 0; i < elements.length; i++) {
                    let target = elements[i].hasAttribute("for") ? eval(elements[i].getAttribute("for").replace("this", "elements[i]")) : false;
                    if (target) {
                        target.paging = elements[i];
                    }
                    else {
                        target = contents;
                        target.paging = elements[i];
                    }

                    target.paging.pages = target.paging.querySelector("[ui-content='pages']") || false;
                    target.paging.prevPage = target.paging.querySelector("[ui-content='prev-page']") || false;
                    target.paging.nextPage = target.paging.querySelector("[ui-content='next-page']") || false;
                }

                contents.initialized = true;
            }

            return contents;
        };

        $sacola.updateCartCount = function(count) {
            const cartCount = document.querySelector('.cart-count');
            cartCount.textContent = count;
        }

        $sacola.countItens = function() {
            const url = $min.root() + $ui.relativePath + 'Pedido/GetPedido';
            const headers = {
                "Content-Type": "application/json",
                "X-XSRF-TOKEN": $min.getCookie("XSRF-TOKEN")
            };

            const onSuccess = function(response) {
                console.log(response);
            };

            const onFailure = function(httpCode, httpMessage) {
                console.log("erro");
            };

            $min.ajax({
                url,
                headers,
                onsuccess: onSuccess,
                onfailure: onFailure
            });
        }

        $sacola.open = function() {
            window.location = 'Produto/Sacola';
        }

        $sacola.expanding = function(element) {
            if(element.ariaExpanded == 'false'){
                element.closest('li').querySelector('.sacola-content').classList.remove('hidden');
                element.ariaExpanded = 'true';

            }else {
                element.closest('li').querySelector('.sacola-content').classList.add('hidden');
                element.ariaExpanded = 'false';
            }
        };
    })(window.$sacola = window.$sacola || {});

    $sacola.updateCartCount(@Model.CartItemCount);
    

</script>
