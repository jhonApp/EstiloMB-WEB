@using EstiloMB.MVC
@using EstiloMB.Core
@{
    ViewData["Title"] = "Sacola";
}
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <link rel="stylesheet" href="~/css/site.css" />

    <script type="text/javascript" src="~/js/fa/all.js"></script>
    <script type="text/javascript" src="~/js/ChartJS/Chart.js"></script>
    <script type="text/javascript" src="~/js/site.js"></script>
    <script type="text/javascript" src="~/js/principal.js"></script>
    <script type="text/javascript" src="~/js/Minimum-1.8.js"></script>
    <script src="~/js/swipe.js"></script>
</head>
<div class="nav-main-sacola">
    <img class="logo" src="~/image/logo-oficial.png" alt="" />
    <nav>
        <div class="wrapper">

            <ul class="nav-links">
                <li class="active">
                    <a>Sacola</a>
                </li>
                <li>
                    <a>Identificação</a>
                </li>
                <li>
                    <a>Pagamento</a>
                </li>
                <li>
                    <a>Sucesso</a>
                </li>
            </ul>
        </div>
    </nav>
</div>
<content>
    <div class="wrapper-sacola" id="sacola">
        <div class="colsWeb">
            <div class="title-resume"><h1>Sacola</h1></div>
            <div class="card-sacola" ui-content="data">
                <div class="resume-shop" data-array="ItemPedidos" onbind="this.data = data; console.log(data)">
                    <template>
                        <div class="shop-item">
                            <img src="~/image/jeans.jpg"
                                 onbind="if (data.ImageURL) { this.src = '@Url.Content("~/")' + 'Produtos/' + data.ImageURL; }
                                        else { this.src = '@Url.Content("~/image/jeans.jpg")'; }" />
                            <div class="resume-info">
                                <input type="hidden" name="ItemPedidoValor" data-bind="Produto.Valor" />
                                <input type="hidden" name="ID" data-bind="ID" />
                                <input type="hidden" name="PedidoID" data-bind="PedidoID" />
                                <p><strong><span data-bind="Produto.Nome"></span></strong></p>
                                <p><span>Tamanho: </span><strong><span data-bind="Tamanho"></span></strong></p>
                                <p><span>Cor: </span><strong><span data-bind="Cor"></span></strong></p>
                                <p>
                                    <span class="title-qtd size-1em">Quantidade: </span>
                                    <button id="decrement" onclick="stepper(this)">-</button>
                                    <input type="number" min="0" max="100" data-bind="Quantidade" id="input-qtd" />
                                    <button id="increment" onclick="stepper(this)">+</button>
                                </p>
                            </div>
                            <div class="remove-item">
                                <button class="icon tooltip select"
                                        onclick="$pedido.delete(this, this.closest('.shop-item'))">
                                    <i class="far fa-trash"></i>
                                </button>
                                <span class="value-size" name="ValorTotal" data-bind="ValorTotal"></span>
                            </div>
                        </div>
                    </template>
                </div>
                <div class="entrega-shop">
                    <div class="title-entrega"><h1>Selecione uma opção para a entrega ou retire no local:</h1></div>
                    <ul class="accordion_entrega">
                        <li>
                            <input type="checkbox" name="accordion" id="first" />
                            <label class="first" for="first">
                                Correios
                                <i class="fal fa-chevron-right"></i>
                            </label>
                            <div class="content">
                                <div class="box">
                                    <p>Calcular frete e prazo</p>
                                    <input type="text" id="consulta" name="consulta" placeholder="Digite seu CEP aqui" />
                                    <input type="submit" id="search" value="calcular frete" onclick="$pedido.correios(this, document.querySelector('.resume-shop'))" />
                                    <a href="https://buscacepinter.correios.com.br/app/endereco/index.php?t" target="_blank">Não sei meu CEP</a>
                                    <div class="adress">
                                        <span class="hidden box-info" name="frete-info" data-bind="Frete"></span>
                                    </div>
                                    <div class="adress">
                                        <span class="hidden box-info" name="frete-prazo" data-bind=""></span>
                                    </div>
                                    <div class="adress">
                                        <i class="fas fa-map-marker-alt hidden"></i>
                                        <span class="hidden box-info" name="frete-endereco" data-bind=""></span>
                                    </div>
                                </div>
                            </div>
                        </li>
                        <li>
                            <input type="checkbox" name="accordion" id="second" />
                            <label class="second" for="second">
                                Combine com o vendedor
                                <i class="fal fa-chevron-right"></i>
                            </label>
                            <div class="content">
                                <p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam eaque ipsa, quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt, explicabo. Nemo enim ipsam voluptatem, quia voluptas sit, aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos, qui ratione voluptatem sequi nesciunt, neque porro quisquam est, qui dolorem ipsum, quia dolor sit, amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt, ut labore et dolore magnam aliquam quaerat voluptatem. </p>
                            </div>
                        </li>
                        <li>
                            <input type="checkbox" name="accordion" id="third" />
                            <label class="third" for="third">
                                Retire no local
                                <i class="fal fa-chevron-right"></i>
                            </label>
                            <div class="content">
                                <p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam eaque ipsa, quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt, explicabo. Nemo enim ipsam voluptatem, quia voluptas sit, aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos, qui ratione voluptatem sequi nesciunt, neque porro quisquam est, qui dolorem ipsum, quia dolor sit, amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt, ut labore et dolore magnam aliquam quaerat voluptatem. </p>
                            </div>
                        </li>
                    </ul>
                </div>
                <div class="valor-shop">
                    <div class="title-resumo"><h1>Resumo do Pedido</h1></div>
                    <div class="resumo">
                        <div class="item-resumo">
                            <div>
                                <span>Produto(s):</span>
                                <span name="ValorTotalProdutos" data-bind="ValorTotalProdutos"></span>
                            </div>
                            <div>
                                <span>Frete:</span>
                                <span name="Frete" data-bind="Frete"></span>
                            </div>
                        </div>
                        <div class="total-resumo">
                            <div>
                                <span>Total:</span>
                                <span name="ValorTotalPedido" data-bind="ValorTotalPedido"></span>
                            </div>
                        </div>
                        <button class="button-pay" onclick="$pedido.userValidation()">IR PARA PAGAMENTO</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</content>
<template id="ui-popup">
    <div class="ui-popup pulse-center">

        <div class="left-bar">
            <i class="fas fa-exclamation-triangle"></i>
        </div>

        <div class="title" ui-content="title">Confirmação</div>
        <div class="text" ui-content="text"></div>

        <div class="bottom-bar">
            <button class="confirm" ui-action="confirm">
                <span><i class="far fa-check"></i></span>
                Confirmar
            </button>

            <button class="cancel" ui-action="cancel">
                <span><i class="far fa-times"></i></span>
                Cancelar
            </button>
        </div>
    </div>
</template>
<script>
    function formatarValorMonetario(valorString) {
        const valorFloat = parseFloat(valorString);
        if (isNaN(valorString)) {
            return "Valor inválido";
        }
        const valorFormatado = valorFloat.toLocaleString("pt-BR", {
            style: "currency",
            currency: "BRL",
        });
        return valorFormatado;
    }

    function stepper(btn) {
       let input = btn.closest('.resume-info').querySelector('#input-qtd');

       let id = btn.getAttribute("id");
       let min = input.getAttribute("min");
       let max = input.getAttribute("max");
       let val = input.value;
       let quantidade = (id == "increment") ? (parseInt(val) + 1) : (val - 1);

       if(quantidade >= min && quantidade <= max) {
           input.value = quantidade;
           $pedido.calcularValorItem(btn.closest('.card-sacola'), id);
       }
    }

    function hiddenGroup(element) {
        let apparence = element.closest('.entrega-shop').querySelectorAll('.info-none');

        apparence.forEach(function(item){
            if(item.id == element.id){
                item.classList.remove("none");
            }
            else
            {
                item.classList.add("none");
            }
        });
    }

    (function($pedido){

        var init = function (container) {
            let contents = container.querySelector("[ui-content='data']");
            if (!contents) { return false; }

            contents.isAutoLoad = (contents.getAttribute("ui-load") || "").toLowerCase() === "auto";

            if (!contents.initialized) {
                contents.container = container;
                contents.pixelAutoLoadThreshold = 25;
                contents.maxPageCount = parseInt(contents.getAttribute("maxPageCount"), 10) || 10;

                contents.url = contents.getAttribute("data-url");
                contents.template = contents.template || contents.querySelector(":scope > template") || false;

                let elements = null;

                elements = container.querySelectorAll("[ui-content='filter']") || false;
                for (let i = 0; i < elements.length; i++) {
                    let target = elements[i].hasAttribute("for") ? eval(elements[i].getAttribute("for").replace("this", "elements[i]")) : false;
                    if (target) { target.filter = elements[i]; continue; }

                    contents.filter = elements[i];
                }

                //elements = container.querySelectorAll("[ui-content='empty']") || false;
                //for (let i = 0; i < elements.length; i++) {
                //    let target = elements[i].hasAttribute("for") ? eval(elements[i].getAttribute("for").replace("this", "elements[i]")) : false;
                //    if (target) { target.empty = elements[i]; continue; }

                //    contents.empty = elements[i];
                //}

                //elements = container.querySelectorAll("[ui-content='loading']") || false;
                //for (let i = 0; i < elements.length; i++) {
                //    let target = elements[i].hasAttribute("for") ? eval(elements[i].getAttribute("for").replace("this", "elements[i]")) : false;
                //    if (target) { target.loading = elements[i]; continue; }

                //    contents.loading = elements[i];
                //}

                elements = container.querySelectorAll("[ui-content='paging']") || false;
                for (let i = 0; i < elements.length; i++) {
                    let target = elements[i].hasAttribute("for") ? eval(elements[i].getAttribute("for").replace("this", "elements[i]")) : false;
                    if (target) {
                        target.paging = elements[i];
                    }
                    else {
                        target = contents;
                        target.paging = elements[i];
                    }

                    target.paging.pages = target.paging.querySelector("[ui-content='pages']") || false;
                    target.paging.prevPage = target.paging.querySelector("[ui-content='prev-page']") || false;
                    target.paging.nextPage = target.paging.querySelector("[ui-content='next-page']") || false;
                }

                contents.initialized = true;
            }

            return contents;
        };

        function substituirVirgulaPorPonto(string) {
          return string.replace(/,/g, ".");
        }

        $pedido.userValidation = function(){
            const url = $min.root() + $ui.relativePath + 'Pagamento/UserValidation';
            const headers = {
                "Content-Type": "application/json",
                "X-XSRF-TOKEN": $min.getCookie("XSRF-TOKEN")
            };

            const onSuccess = function(id) {

              if(id != 0){
                  window.location = 'FormaPagamento';
              }else{
                  // Caso contrário, redireciona para a página de login
                  window.location = 'Login';
              }
            };

            const onFailure = function(httpCode, httpMessage) {
                console.log("erro");
            };

            $min.ajax({
                url,
                headers,
                onsuccess: onSuccess,
                onfailure: onFailure
            });
        }

        $pedido.delete = function(button, itemSeletor){
            let ID = itemSeletor.querySelector('[name=ID]').value;
            let pedidoID = itemSeletor.querySelector('[name=PedidoID]').value;
            let container = itemSeletor.closest('.colsWeb');

            $min.ajax({
                url: $min.root() + $ui.relativePath + 'Produto/RemoveItem?ID=' + ID,
                headers: {
                    "Content-Type": "application/json",
                    "X-XSRF-TOKEN": $min.getCookie("XSRF-TOKEN")
                },
                onsuccess: function (response) {
                    console.log(response)
                    if(response.ItemPedidos.length == 0){ return window.location.href = 'SacolaVazia'; }

                    $min.bind(container, response);
                },
                onfailure: function (httpCode, httpMessage) {
                }
            });
        }

        $pedido.maskCEP = function(cepInput, container){

            // adiciona um ouvinte de eventos para o campo de entrada
            cepInput.addEventListener('input', formatCep);

            function formatCep() {

              let cep = cepInput.value;
              cep = cep.replace(/\D/g, '');
              cep = cep.replace(/(\d{5})(\d{3})/, '$1-$2');
              cepInput.value = cep;
            }
        }

        $pedido.correios = function(input, container){

            async function obterEndereco(cep) {
                if (cep) {
                    try {
                        const response = await fetch(`https://viacep.com.br/ws/${cep}/json/`);
                        const item = await response.json();
                        return item;
                    } catch (error) {
                        console.error(error);
                    }
                }
            }

            function obterDadosEnvio(container, cep) {
              const { ProdutoTamanhos, Valor } = container.data.ItemPedidos[0].Produto;
              const { Peso, Altura, Comprimento, Largura } = ProdutoTamanhos[0];

              return {
                peso: Peso,
                altura: Altura,
                comprimento: Comprimento,
                largura: Largura,
                valor: Valor,
                cepOrigem: "09330383",
                cepDestino: cep.replace(/-/g, ''),
                pesoQuilo: Peso / 1000,
              };
            }

            function enviarRequisicao(dados, resulEndereco) {
              const url = `${$min.root()}${$ui.relativePath}Pedido/ConsultarPrazo?cep=${dados.cepDestino}&peso=${dados.pesoQuilo}&altura=${dados.altura}&comprimento=${dados.comprimento}&largura=${dados.largura}&valor=${dados.valor}`;

              const headers = {
                "Content-Type": "application/json",
                "X-XSRF-TOKEN": $min.getCookie("XSRF-TOKEN")
              };

              try {
                $min.ajax({
                  url,
                  headers,
                  onsuccess(response) {
                    console.log(response);
                    if (response) {
                      const [valorFrete, diasEntrega, endereco] = response;

                      const valorProdutosElement = document.querySelector('[name=ValorTotalProdutos]');
                      const freteElement = document.querySelector('[name=Frete]');
                      const subTotalElement = document.querySelector('[name=ValorTotalPedido]');

                      const valorProdutosFloat = parseFloat(valorProdutosElement.innerHTML.replace(/[^\d,.-]/g, '').replace('.', '').replace(',', '.'));
                      const novoValorFrete = substituirVirgulaPorPonto(valorFrete);

                      const novoSubTotal = valorProdutosFloat + parseFloat(novoValorFrete);

                      const enderecoElements = document.querySelectorAll('.box .adress .box-info');
                      console.log(enderecoElements)
                      enderecoElements.forEach((item) => {
                          console.log(item)
                            if (item.getAttribute('name') === 'frete-info') {
                                item.innerHTML = "Frete: " + valorFrete;
                            } else if (item.getAttribute('name') === 'frete-prazo') {
                                item.innerHTML = "Prazo: " + diasEntrega + " dia(s)";
                            } else if (item.getAttribute('name') === 'frete-endereco') {
                                item.innerHTML = endereco;
                            }

                            item.classList.remove('hidden');
                      });

                      subTotalElement.innerHTML = formatarValorMonetario(novoSubTotal.toString());
                      freteElement.innerHTML = formatarValorMonetario(novoValorFrete);
                    }
                  },
                  onfailure(httpCode, httpMessage) {
                    console.error(`Erro na requisição: ${httpCode} ${httpMessage}`);
                  }
                });
              } catch (error) {
                console.error(error);
              }
            }

            const cep = input.closest('.box').querySelector('#consulta').value;
            const dadosEnvio = obterDadosEnvio(container, cep);
            const enderecoCompleto = obterEndereco(cep);
            enviarRequisicao(dadosEnvio, enderecoCompleto);
        };

        // Função que calcula o valor do item e atualiza o valor total do pedido
        $pedido.calcularValorItem = function(itemDiv, id) {
          const PEDIDO = {
            ATRIBUTO_ITEM_PEDIDO_VALOR: 'ItemPedidoValor',
            ATRIBUTO_VALOR_ITEM_TOTAL: 'ValorTotal'
          };

          const quantidade = itemDiv.querySelector("#input-qtd").value;
          const identificadorItem = itemDiv.querySelector(`[name=ID]`).value;
          const valorUnitario = itemDiv.querySelector(`[name=${PEDIDO.ATRIBUTO_ITEM_PEDIDO_VALOR}]`).value;
          let valorItemTotal = itemDiv.querySelector(`[name=${PEDIDO.ATRIBUTO_VALOR_ITEM_TOTAL}]`).innerHTML;
          const valorFloat = parseFloat(valorItemTotal.replace(/[^\d,.-]/g, '').replace('.', '').replace(',', '.'));

          $min.ajax({
            url: $min.root() + $ui.relativePath + 'Pedido/UpdateByParamentros?ValorTotal=' + valorFloat + '&ValorUnitario=' + valorUnitario + '&Quantidade=' + quantidade + '&IdentificadorItem=' + identificadorItem + '&ID=' + id,
            headers: {
                "Content-Type": "application/json",
                "X-XSRF-TOKEN": $min.getCookie("XSRF-TOKEN")
            },
            onsuccess: function(response) {
                let id = itemDiv.querySelector(`[name=ID]`).value;

                if(response){
                    let itemPedido = response.ItemPedidos.find(pedido => pedido.ID == id);
                    let valorTotalProduto = response.ValorTotalProdutos;
                    let valorTotalPedido = response.ValorTotalPedido;

                    if (itemPedido) {
                      itemDiv.querySelector(`[name=${PEDIDO.ATRIBUTO_VALOR_ITEM_TOTAL}]`).innerHTML = formatarValorMonetario(itemPedido.ValorTotal);
                    }

                    itemDiv.querySelector(`[name=ValorTotalProdutos]`).innerHTML = formatarValorMonetario(valorTotalProduto);
                    itemDiv.querySelector(`[name=ValorTotalPedido]`).innerHTML = formatarValorMonetario(valorTotalPedido);
                }
            },
            onfailure: function(httpCode, httpMessage) {
                console.log("erro")
            }
          });
        };

        $pedido.carregar = function(container, id) {
            const contents = init(container);
            if (!contents) {
                return false;
            }

            if (contents.filter) {
                contents.request.Data = $min.read(contents.filter);
            }

            if (contents.template) {
                $min.clear(contents);
            }
            const url = $min.root() + $ui.relativePath + 'Produto/GetPedido';
            const headers = {
                "Content-Type": "application/json",
                "X-XSRF-TOKEN": $min.getCookie("XSRF-TOKEN")
            };

            const onSuccess = function(response) {

              const subTotal = response.ValorTotalPedido + response.Frete; // Calculate subTotal by adding valorProdutos and frete
              const subTotalPedidos = response.ValorTotalPedido; // Calculate subTotal by adding valorProdutos and frete
              const frete = response.Frete; // Calculate subTotal by adding valorProdutos and frete

              response.Frete = formatarValorMonetario(frete);
              response.ValorTotalPedido = formatarValorMonetario(subTotal);
              response.ValorTotalProdutos = formatarValorMonetario(subTotalPedidos);

              for (let i = 0; i < response.ItemPedidos.length; i++) {
                const order = response.ItemPedidos[i];
                order.ValorTotal = formatarValorMonetario(order.ValorTotal);
              }

              $min.bind(contents, response); // Bind the contents with the pedido object

              // Seleciona todos os elementos filhos de ".box .adress" que possuem a classe "hidden"
              const enderecoElements = document.querySelectorAll('.box .adress .hidden');

              // Seleciona o input com nome "consulta"
              const inputConsulta = document.querySelector('[name=consulta]');

              // Atualiza o conteúdo e o valor dos elementos
              if(response.PedidoEndereco != null){
                 enderecoElements.forEach((item) => {
                    const name = item.getAttribute('name');
                    switch (name) {
                        case 'frete-info':
                            item.innerHTML = `Frete: ${response.Frete}`;
                            break;
                        case 'frete-prazo':
                            //item.innerHTML = `Prazo: ${diasEntrega} dia(s)`;
                            break;
                        case 'frete-endereco':
                            item.innerHTML = `${response.PedidoEndereco.Bairro}, ${response.PedidoEndereco.Logradouro} - ${response.PedidoEndereco.UF}`;
                            break;
                        default:
                            break;
                    }
                    if (inputConsulta) {
                    
                        inputConsulta.value = response.PedidoEndereco.CEP;
                    }
                    item.classList.remove('hidden');
                 });       
              }
            };

            const onFailure = function(httpCode, httpMessage) {
                console.log("erro");
            };

            $min.ajax({
                url,
                headers,
                onsuccess: onSuccess,
                onfailure: onFailure
            });
        };

    })(window.$pedido = window.$pedido || {});

    $pedido.carregar(document.getElementById("sacola"));

    // seleciona o campo de entrada de CEP
    $pedido.maskCEP(document.getElementById('consulta'));
</script>
