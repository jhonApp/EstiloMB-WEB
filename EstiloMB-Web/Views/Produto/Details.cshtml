@using EstiloMB.Core
@using EstiloMB.MVC
@{
    ViewData["Title"] = "Detalhes";
    Layout = "~/Views/Shared/_Layout.cshtml";
    int produtoID = ViewBag.ProdutoID;
    int userID = User.GetClaimInt32("ID");
    
}
<content>
    <div class="colsWeb" id="detalhes">
        <div class="left">
            <div class="grid-content" ui-content="data" onbind="this.data = data; console.log(data)">
                <div class="big-img">
                    <div class="swiper mySwiper2">
                        <div class="swiper-wrapper"></div>
                    </div>
                </div>
                <div class="info-details">
                    <h1><span data-bind="Nome"></span></h1>
                    <div class="line">
                        <!-- Valor -->
                        <p><span>por </span><strong class="price">R$ <span data-bind="Valor"></span> </strong></p>
                        <p><span>em até </span><strong>12x</strong><span> de </span><strong>R$15,00</strong></p>
                    </div>
                    <div class="line">
                        <!-- Cor -->
                        <p><span>escolha a cor : </span></p>
                        <div class="flex" data-array="ProdutoCor">
                            <template>
                                <p><input type="radio" name="radio1" class="produtoCor radio" onclick="$produto.bindImagebyCor(this, this.closest('.colsWeb'))" data-bind="Hexadecimal" /></p>
                                <span class="hidden produtoCor-text" data-bind="ID"/>
                            </template>
                        </div>
                    </div>
                    <div class="line">
                        <!-- Tamanho -->
                        <p><span>escolha o tamanho : <span class="text-validation"></span> </span></p>
                        <div class="flex" data-array="ProdutoTamanhos">
                            <template>
                                <div class="radio-size">
                                    <input type="radio" class="input-size" value="a" data-bind="Tamanho.Nome" onclick="$produto.tamanhoChecked(this)" />
                                    <span name="TamanhoName" data-bind="Tamanho.Nome"></span>
                                </div>
                            </template>
                        </div>
                    </div>
                    <div class="line">
                        <button class="button-pay"
                                onclick="$produto.validation(this, this.closest('.grid-content'))">
                            COMPRAR
                        </button>
                    </div>
                    <div class="line">
                        <p><span>Especificações : <span data-bind="Descricao"></span></span></p>
                    </div>
                </div>
                <div>
                    <div class="swiper mySwiper">
                        <div class="images swiper-wrapper">
                            <div class="swiper-slide"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</content>
<script>

    (function($produto) {

        var init = function (container) {
            let contents = container.querySelector("[ui-content='data']");
            if (!contents) { return false; }

            contents.isAutoLoad = (contents.getAttribute("ui-load") || "").toLowerCase() === "auto";

            if (!contents.initialized) {
                contents.container = container;
                contents.pixelAutoLoadThreshold = 25;
                contents.maxPageCount = parseInt(contents.getAttribute("maxPageCount"), 10) || 10;

                contents.url = contents.getAttribute("data-url");
                contents.template = contents.template || contents.querySelector(":scope > template") || false;

                let elements = null;

                elements = container.querySelectorAll("[ui-content='filter']") || false;
                for (let i = 0; i < elements.length; i++) {
                    let target = elements[i].hasAttribute("for") ? eval(elements[i].getAttribute("for").replace("this", "elements[i]")) : false;
                    if (target) { target.filter = elements[i]; continue; }

                    contents.filter = elements[i];
                }

                //elements = container.querySelectorAll("[ui-content='empty']") || false;
                //for (let i = 0; i < elements.length; i++) {
                //    let target = elements[i].hasAttribute("for") ? eval(elements[i].getAttribute("for").replace("this", "elements[i]")) : false;
                //    if (target) { target.empty = elements[i]; continue; }

                //    contents.empty = elements[i];
                //}

                //elements = container.querySelectorAll("[ui-content='loading']") || false;
                //for (let i = 0; i < elements.length; i++) {
                //    let target = elements[i].hasAttribute("for") ? eval(elements[i].getAttribute("for").replace("this", "elements[i]")) : false;
                //    if (target) { target.loading = elements[i]; continue; }

                //    contents.loading = elements[i];
                //}

                elements = container.querySelectorAll("[ui-content='paging']") || false;
                for (let i = 0; i < elements.length; i++) {
                    let target = elements[i].hasAttribute("for") ? eval(elements[i].getAttribute("for").replace("this", "elements[i]")) : false;
                    if (target) {
                        target.paging = elements[i];
                    }
                    else {
                        target = contents;
                        target.paging = elements[i];
                    }

                    target.paging.pages = target.paging.querySelector("[ui-content='pages']") || false;
                    target.paging.prevPage = target.paging.querySelector("[ui-content='prev-page']") || false;
                    target.paging.nextPage = target.paging.querySelector("[ui-content='next-page']") || false;
                }

                contents.initialized = true;
            }

            return contents;
        };

        var getMessage = function (string, data) {
            let matches = (string || "").match(/\{[A-Za-z0-9\.]+(:.+)?\}/g);
            if (!matches) { return string; }

            for (let i = 0; i < matches.length; i++) {
                let object = data;
                let property = matches[i].replace(/[\{\}]/g, '');
                while (property.indexOf(".") > -1) {
                    let member = property.substr(0, property.indexOf("."));
                    object = object[member];
                    property = property.substr(property.indexOf(".") + 1);
                }

                let value = null;
                if (property.indexOf(":") > 0) {
                    value = $min.format(object[property.substr(0, property.indexOf(":"))], property.substr(property.indexOf(":") + 1));
                }
                else {
                    value = object[property];
                }

                string = string.replace(matches[i], value);
            }
            return string;
        };

        var getTamanho = function (content) {

            let tamanho = "";
            let tamanhos = content.querySelectorAll('.radio-size');
            let cont = 0;

            for(let i = 0; i < tamanhos.length; i++){ 
                if(tamanhos[i].querySelector('.input-size').checked == true){ 
                    cont++; 
                    tamanho = tamanhos[i].querySelector('[name=TamanhoName]').innerHTML;
                } 
            }

            obj = {
                tamanho: tamanho,
                contador: cont
            };

            return obj;
        }

        var getCor = function (content) {
            let cores = content.querySelectorAll('.produtoCor');
            let corID = "";

            for(let i = 0; i < cores.length; i++){ 
                if(cores[i].checked == true){
                    corID = cores[i].parentElement.nextElementSibling.innerHTML;
                } 
            }

            return corID;
        }

        $produto.validation = function(button, content){
            let data = content.data;
            let usuarioID = @userID;
            let prodID = data.ProdutoID;

            let corID = getCor(content);
            let obj = getTamanho(content);

            if(obj.cont != 0){
                $min.ajax({
                    url: $min.root() + $ui.relativePath + 'Pedido/GerarPedido?produtoID=' + data.ProdutoID + '&tamanho=' + obj.tamanho + '&usuarioID=' + usuarioID + '&corID=' + corID,
                    headers: {
                        "Content-Type": "application/json",
                        "X-XSRF-TOKEN": $min.getCookie("XSRF-TOKEN")
                    },
                    onsuccess: function(response) {
                        if(response != null){
                            window.location.href = 'Sacola?pedidoID=' + response[0].PedidoID;
                        }
                    },
                    onfailure: function(httpCode, httpMessage) {
                        if (httpCode === 401) {
                            let currentURL = window.location.href.replace($min.root() + $ui.relativePath, "");
                            window.location.href = $min.root() + $ui.relativePath + $ui.redirectLoginURL + currentURL;
                        }
                        $ui.message(httpMessage, "error");
                    }
                });
            }else{
                let span = content.querySelector('.text-validation');
                span.innerHTML = "Por favor, escolha uma opção";
            }
        };

        $produto.tamanhoChecked = function(input){
            let Listamanhos = input.closest('.flex').querySelectorAll('.radio-size');

            for(let i = 0; i < Listamanhos.length; i++){
                if(Listamanhos[i].querySelector('input[type=radio]').checked == true){
                    if(Listamanhos[i].hasAttribute('selecionado')){

                        Listamanhos[i].removeAttribute('selecionado');
                        Listamanhos[i].querySelector('input').checked = false;
                    }else{
                        Listamanhos[i].setAttribute('selecionado', true);
                    }
                }
            }
        }

        $produto.carregar = function(container, id) {
            let contents = init(container);
            if (!contents) { return false; }

            if (contents.filter) {
                contents.request.Data = $min.read(contents.filter);
            }

            if (contents.template) {
                $min.clear(contents);
            }

            $min.ajax({
                url: $min.root() + $ui.relativePath + 'Produto/GetProdutoByID?ID=' + @produtoID,
                headers: {
                    "Content-Type": "application/json",
                    "X-XSRF-TOKEN": $min.getCookie("XSRF-TOKEN")
                },
                onsuccess: function (response) {
                    let corAnterior = [];
                    let newProdutoImages = [];

                    for(let i = 0; i < response.Data.ProdutoImagens.length; i++){
                        corAnterior.push(response.Data.ProdutoImagens[i].Cor);
                    }

                    let newProdutoCor = corAnterior.filter(function (a) {
                        return !this[JSON.stringify(a)] && (this[JSON.stringify(a)] = true);
                    }, Object.create(null));

                    for(let i = 0; i < response.Data.ProdutoImagens.length; i++){
                        if(newProdutoCor[0].Hexadecimal == response.Data.ProdutoImagens[i].Cor.Hexadecimal){
                            newProdutoImages.push(response.Data.ProdutoImagens[i]);
                        }
                    }

                    let obj = {
                        ProdutoID: response.Data.ID,
                        ProdutoImagensOriginal: response.Data.ProdutoImagens,
                        ProdutoImagens: newProdutoImages,
                        ProdutoCor: newProdutoCor,
                        ProdutoTamanhos: response.Data.ProdutoTamanhos,
                        CaminhoProduto: response.Data.ProdutoImagens[0].ImageURL,
                        Valor: response.Data.Valor,
                        Descricao: response.Data.Descricao,
                        Nome: response.Data.Nome
                    };

                    $min.bind(contents, obj);
                    $produto.bindImages(contents, obj);
                    $produto.bindCor(contents, obj);
                    $produto.bindBigImages(contents, obj);

                },
                onfailure: function (httpCode, httpMessage) {

                }
            });
        };

        $produto.bindImagebyCor = function (input, contents){
            let dados = input.closest('.grid-content').data;
            let newProdutoImages = [];
            let bigIMG = contents.querySelector('.big-img');
            let smallIMG = contents.querySelector('.mySwiper');

            for(var i = 0; i < dados.ProdutoImagensOriginal.length; i++)
            {
              if(dados.ProdutoImagensOriginal[i].Cor.Hexadecimal == input.value)
              {
                  newProdutoImages.push(dados.ProdutoImagensOriginal[i]);
              }
            }

            let obj = {
                ProdutoImagensOriginal: dados.ProdutoImagens,
                ProdutoImagens: newProdutoImages,
                CaminhoProduto: newProdutoImages[0].ImageURL,
            };

            $min.bind(bigIMG, obj);
            $min.bind(smallIMG, obj);
            $produto.bindBigImages(contents, obj);
            $produto.bindImages(smallIMG, obj);
        }

        $produto.bindBigImages = function (content, data) {
            let slide;
            let caminho;
            let container = document.querySelector('.swiper-wrapper');

            while (container.hasChildNodes()) {
                container.removeChild(container.firstChild);
            }

            let convertObj = function(slide) {

                var htmlObject = '';

                var temp = document.createElement('div');

                temp.innerHTML = slide;
                htmlObject = temp.childNodes[1];
                container.appendChild(htmlObject);

                return htmlObject;
            }

            for(let i = 0; i < data.ProdutoImagens.length; i++){
                ImageURL = data.ProdutoImagens[i].ImageURL;

                slide += `<div class="swiper-slide">
                               <img src="${caminho}"/>
                          </div>`

                slide = convertObj(slide);
                caminho = slide.querySelector('img').src = '@Url.Content("~/")' + 'Produtos/' + ImageURL;
            }
        };

        $produto.bindImages = function (content, data) {
            let slide;
            let caminho;
            let container = document.querySelector('.mySwiper .swiper-wrapper');

            while (container.hasChildNodes()) {
                container.removeChild(container.firstChild);
            }

            let convertObj = function(slide) {

                var htmlObject = '';

                var temp = document.createElement('div');

                temp.innerHTML = slide;
                htmlObject = temp.childNodes[1];
                container.appendChild(htmlObject);

                return htmlObject;
            }

            for(let i = 0; i < data.ProdutoImagens.length; i++){
                ImageURL = data.ProdutoImagens[i].ImageURL;

                slide += `<div class="swiper-slide">
                                <div class="small-img" onclick="$produto.alterSrc(this)">
                                    <img src="${caminho}"/>
                                </div>
                            </div>`

                slide = convertObj(slide);
                caminho = slide.querySelector('img').src = '@Url.Content("~/")' + 'Produtos/' + ImageURL;
            }
        };

        $produto.bindCor = function (content, data) {
            let inputs = content.querySelectorAll(".produtoCor");

            for(let i = 0; i < inputs.length; i++){
                if(i == 0){
                    inputs[i].checked = true;
                }
                inputs[i].style.backgroundColor = data.ProdutoCor[i].Hexadecimal;
                inputs[i].value = data.ProdutoCor[i].Hexadecimal;
            }
        };

        $produto.alterSrc = function (element) {
            let src = element.querySelector('img').src;
            let bigSrc = element.closest('.grid-content').querySelector('.big-img img');

            bigSrc.src = src;
        }

    })(window.$produto = window.$produto || {});

    $produto.carregar(document.getElementById("detalhes"));
</script>

<script>
    var swiper = new Swiper(".mySwiper", {
      loop: false,
      spaceBetween: 10,
      slidesPerView: 4,
      freeMode: true,
      watchSlidesProgress: true,
    });
    var swiper2 = new Swiper(".mySwiper2", {
        pagination: {
          el: ".swiper-pagination",
          type: "fraction",
      },
      loop: true,
      spaceBetween: 10,
      navigation: {
        nextEl: ".swiper-button-next",
        prevEl: ".swiper-button-prev",
      },
      thumbs: {
        swiper: swiper,
      },
    });
</script>